[{"name": "app.py", "content": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom palmerpenguins import load_penguins\nfrom shiny import App, ui, render, reactive, req\nfrom shinywidgets import render_plotly, output_widget\n\npenguins = load_penguins()\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.h2(\"Sidebar\"),\n\n        ui.input_selectize(\n            \"selected_attribute\",\n            \"Select Attribute\",\n            [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n        ),\n\n        ui.input_numeric(\"plotly_bin_count\", \"Plotly Histogram Bins\", 20),\n        ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bins\", 1, 100, 20),\n\n        ui.input_checkbox_group(\n            \"selected_species_list\",\n            \"Filter by Species\",\n            [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n            selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n            inline=True\n        ),\n\n        ui.input_checkbox_group(\n            \"selected_island_list\",\n            \"Filter by Island\",\n            [\"Biscoe\", \"Dream\", \"Torgersen\"],\n            selected=[\"Biscoe\", \"Dream\", \"Torgersen\"],\n            inline=True\n        ),\n\n        ui.hr(),\n        ui.a(\"GitHub\", href=\"https://github.com/Kiruthikaa2512/cintel-02-data\", target=\"_blank\")\n    ),\n\n    ui.markdown(\"**Instructions:** Use filters and dropdowns to explore the data visually.\"),\n    ui.download_button(\"download_data\", \"Download Filtered Data\"),\n\n    ui.layout_columns(\n        ui.output_data_frame(\"data_table\"),\n        ui.output_data_frame(\"data_grid\")\n    ),\n\n    ui.layout_columns(\n        output_widget(\"plotly_hist\"),\n        ui.output_plot(\"seaborn_hist\")\n    ),\n\n    ui.layout_columns(\n        output_widget(\"violin_plot\"),\n        output_widget(\"plotly_scatterplot\")\n    ),\n\n    title=\"Penguin Explorer \u2013 Dashboard by Kiruthikaa\"\n)\n\ndef server(input, output, session):\n    @reactive.calc\n    def filtered_data():\n        req(input.selected_species_list())\n        req(input.selected_island_list())\n\n        return penguins[\n            (penguins[\"species\"].isin(input.selected_species_list())) &\n            (penguins[\"island\"].isin(input.selected_island_list()))\n        ]\n\n    @output\n    @render.data_frame\n    def data_table():\n        return filtered_data()\n\n    @output\n    @render.data_frame\n    def data_grid():\n        return filtered_data()\n\n    @output\n    @render_plotly\n    def plotly_hist():\n        return px.histogram(\n            filtered_data(),\n            x=input.selected_attribute(),\n            nbins=input.plotly_bin_count(),\n            color=\"species\",\n            marginal=\"box\",\n            title=\"Plotly Histogram with Box Summary\"\n        )\n\n    @output\n    @render.plot\n    def seaborn_hist():\n        fig, ax = plt.subplots()\n        sns.histplot(\n            data=filtered_data(),\n            x=input.selected_attribute(),\n            bins=input.seaborn_bin_count(),\n            kde=True,\n            hue=\"species\",\n            ax=ax\n        )\n        ax.set_title(\"Seaborn Histogram with KDE\")\n        ax.set_xlabel(input.selected_attribute())\n        return fig\n\n    @output\n    @render_plotly\n    def violin_plot():\n        return px.violin(\n            filtered_data(),\n            y=input.selected_attribute(),\n            x=\"species\",\n            color=\"species\",\n            box=True,\n            points=\"all\",\n            title=\"Violin Plot of Selected Attribute by Species\"\n        )\n\n    @output\n    @render_plotly\n    def plotly_scatterplot():\n        return px.scatter(\n            filtered_data(),\n            x=\"bill_length_mm\",\n            y=\"body_mass_g\",\n            color=\"species\",\n            title=\"Penguins Scatterplot (Plotly)\",\n            labels={\n                \"bill_length_mm\": \"Bill Length (mm)\",\n                \"body_mass_g\": \"Body Mass (g)\"\n            }\n        )\n\n    @output\n    @render.download(filename=\"filtered_penguins.csv\")\n    def download_data():\n        yield filtered_data().to_csv(index=False)\n\napp = App(app_ui, server)\n", "type": "text"}]